<#@ property name="bimlScripts" type="List<string>" #>
<#@ property name="overwriteExisting" type="Boolean" #>
<#@ property name="saveCompiledBiml" type="Boolean" #>

<#@ assembly name="Microsoft.DataWarehouse" #>
<#@ import namespace="Microsoft.DataWarehouse.Design" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="EnvDTE80" #>
<#@ assembly name="BIDSHelper" #>
<#@ import namespace="BIDSHelper.SSIS.Biml" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="System.Xml" #>

<#@ import namespace="Validation = Varigence.Flow.FlowFramework.Validation" #>
<#@ import namespace="Varigence.Flow.FlowFramework" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>

<#@ include file="..\..\BuildTargets.csbiml" #>
<#@ include file="BimlUtils.Obj.csbiml" #>
<#@ include file="..\..\Config.csbiml" #>

<#  
    if (saveCompiledBiml)
        bimlScripts.Add(Config.CompileBimlScript);

    // Now get the VS instance - unfortunately we can only have one running
    var ApplicationObject = (EnvDTE80.DTE2)System.Runtime.InteropServices.Marshal.GetActiveObject(Config.VsVersion);
    Array projs = (System.Array)ApplicationObject.ActiveSolutionProjects;
    Project project = (Project)projs.GetValue(0);

    // Grab the output window...
    IOutputWindowFactory service = ((System.IServiceProvider)project).GetService(typeof(IOutputWindowFactory)) as IOutputWindowFactory;
    IOutputWindow outputWindow = service.GetStandardOutputWindow(StandardOutputWindow.Build);

    // Iterate through the BuildTargets
    foreach (var target in targets)
    {
        outputWindow.ReportStatusMessage("[" + DateTime.Now.ToString() + "] Starting build on: " + target.Name);
        Validation.ValidationReporter v =
            BidsHelper.CompileBiml(typeof(Varigence.Languages.Biml.AstNode).Assembly, 
                                    "Varigence.Biml.BidsHelperPhaseWorkflows.xml", 
                                    "Compile",
                                    bimlScripts,
                                    new List<string>(),
                                    target.TargetDir,
                                    target.PackagePath,
                                    target.Mssql, 
                                    target.Ssis, 
                                    target.Ssas,
                                    target.Model);
        
        StringBuilder sb = new StringBuilder();
        
        // Enumerate all validation messages and write to the output window.
        foreach (Validation.ValidationItem item in v.ValidationItemsList)
        {
            if (item.Severity == Severity.Error)
            {            
                outputWindow.ReportStatusError(OutputWindowErrorSeverity.Error, BimlUtils.GetErrorId(item.ValidationCode), BimlUtils.GetValidationReporterMessage(item), item.FilePath, item.Line, item.Offset);
            }
            else if (item.Severity == Severity.Warning)
            {
                outputWindow.ReportStatusError(OutputWindowErrorSeverity.Warning, BimlUtils.GetErrorId(item.ValidationCode), BimlUtils.GetValidationReporterMessage(item), item.FilePath, item.Line, item.Offset);
            }
            else
            {
                outputWindow.ReportStatusMessage(BimlUtils.GetValidationReporterMessage(item));
            }
        }


        if (overwriteExisting)
        {
            List<string> newProjectFiles = new List<string>();
            string[] newPackageFiles = Directory.GetFiles(target.TargetDir, "*.dtsx", SearchOption.AllDirectories);
            newProjectFiles.AddRange(newPackageFiles);

#if (!YUKON && !KATMAI)
            //IF DENALI or later...
            // Read packages AND project connection managers
            string[] newConnFiles = Directory.GetFiles(target.TargetDir, "*.conmgr", SearchOption.AllDirectories);
            newProjectFiles.AddRange(newConnFiles);
#endif
            var safePackageFilePaths = new List<string>();
            foreach (var tempFilePath in newProjectFiles)
            {
                string tempFileName = Path.GetFileName(tempFilePath);
                string projectItemFileName = Path.Combine(target.PackagePath, tempFileName);
                safePackageFilePaths.Add(tempFilePath);
                
            }

            

#if (DENALI || SQL2014)
            /*
             * Make sure that the package correctly references the Project connection manager, if used
             */
            List<ProjectConnectionManagerInfo> prjConnInfoList = new List<ProjectConnectionManagerInfo>();

            // STEP 1 - Store all existing Project Connection Managers
            foreach (ProjectItem item in project.ProjectItems)
            {
                if (item.Name.EndsWith(".conmgr"))
                {
                    string fileFullPath = item.FileNames[0];

                    XmlReader r = new XmlTextReader(fileFullPath);
                    XmlDocument doc = new XmlDocument();
                    doc.Load(r);

                    //XmlNamespaceManager xmlnsManager = new XmlNamespaceManager(doc.NameTable);
                    //xmlnsManager.AddNamespace("DTS", "www.microsoft.com/SqlServer/Dts");

                    XmlElement node = doc.DocumentElement;

                    string prefix = node.GetPrefixOfNamespace("www.microsoft.com/SqlServer/Dts");

                    XmlAttribute xaObjectName = node.Attributes[prefix + ":ObjectName"];
                    XmlAttribute xaDTSID = node.Attributes[prefix + ":DTSID"];

                    if (xaObjectName == null) throw new ApplicationException("ObjectName attribute cannot found.");
                    if (xaDTSID == null) throw new ApplicationException("DTSID attribute cannot found.");

                    prjConnInfoList.Add(new ProjectConnectionManagerInfo(fileFullPath, xaObjectName.Value, xaDTSID.Value));

                    r.Close();
                }
            }

            // STEP 2 - For all the Connection Managers that have to be inserted in the solution,
            //          if a connection manager with the same name alread exists, use the existing GUID
            //          to avoid corrupting the package that will be inserted
            foreach (var tempFilePath in safePackageFilePaths)
            {
                if (tempFilePath.EndsWith(".conmgr"))
                {
                    string fileFullPath = tempFilePath;

                    XmlReader r = new XmlTextReader(fileFullPath);
                    XmlDocument doc = new XmlDocument();
                    doc.Load(r);

                    //XmlNamespaceManager xmlnsManager = new XmlNamespaceManager(doc.NameTable);
                    //xmlnsManager.AddNamespace("DTS", "www.microsoft.com/SqlServer/Dts");

                    XmlElement node = doc.DocumentElement;

                    string prefix = node.GetPrefixOfNamespace("www.microsoft.com/SqlServer/Dts");

                    bool saveRequired = false;
                    ProjectConnectionManagerInfo pcmi = prjConnInfoList.Find(x => System.IO.Path.GetFileName(x.FileFullPath) == System.IO.Path.GetFileName(fileFullPath));
                    if (pcmi != null)
                    {
                        XmlAttribute xaDTSID = node.Attributes[prefix + ":DTSID"];
                        if (xaDTSID == null) throw new ApplicationException("DTSID attribute cannot found.");

                        xaDTSID.Value = pcmi.DTSID;
                        saveRequired = true;
                    }
                    else
                    {
                        XmlAttribute xaObjectName = node.Attributes[prefix + ":ObjectName"];
                        XmlAttribute xaDTSID = node.Attributes[prefix + ":DTSID"];

                        if (xaObjectName == null) throw new ApplicationException("ObjectName attribute cannot found.");
                        if (xaDTSID == null) throw new ApplicationException("DTSID attribute cannot found.");

                        prjConnInfoList.Add(new ProjectConnectionManagerInfo(fileFullPath, xaObjectName.Value, xaDTSID.Value));
                    }

                    r.Close();

                    if (saveRequired) doc.Save(fileFullPath);
                }
            }

            // STEP 3 - For Each NEW package make sure that the Project Connection Manager
            //          points to the correct GUID
            foreach (var tempFilePath in safePackageFilePaths)
            {
                if (tempFilePath.EndsWith(".dtsx"))
                {
                    string fileFullPath = tempFilePath;

                    XmlReader r = new XmlTextReader(fileFullPath);
                    XmlDocument doc = new XmlDocument();
                    doc.Load(r);

                    XmlNamespaceManager xmlnsManager = new XmlNamespaceManager(doc.NameTable);
                    xmlnsManager.AddNamespace("DTS", "www.microsoft.com/SqlServer/Dts");

                    XmlElement root = doc.DocumentElement;

                    XmlNodeList nodes = root.SelectNodes("//connection", xmlnsManager);
                    foreach (XmlNode n in nodes)
                    {
                        string refID = n.Attributes["connectionManagerRefId"].Value;
                        ProjectConnectionManagerInfo pcmi = prjConnInfoList.Find(x => "Package.ConnectionManagers[" + x.ObjectName + "]" == refID);
                        if (pcmi == null)
                        {
                            pcmi = prjConnInfoList.Find(x => "Project.ConnectionManagers[" + x.ObjectName + "]" == refID);
                        }

                        if (pcmi != null)
                        {
                            // If a local connection manager does NOT exists, then point to the project connection manager
                            XmlNode node = root.SelectSingleNode("/DTS:Executable/DTS:ConnectionManagers/DTS:ConnectionManager[@DTS:refId=\"" + pcmi.ObjectName + "\"]", xmlnsManager);
                            if (node == null)
                            {
                                n.Attributes["connectionManagerID"].Value = pcmi.DTSID + ":external";
                                n.Attributes["connectionManagerRefId"].Value = "Project.ConnectionManagers[" + pcmi.ObjectName + "]";
                            }
                        }
                    }

                    r.Close();

                    doc.Save(fileFullPath);
                }
            }
#endif

            // Add files to VS Project
            foreach (var tempFilePath in safePackageFilePaths)
            {
                string projectItemFilePath = Path.Combine(target.PackagePath, Path.GetFileName(tempFilePath));
                File.Copy(tempFilePath, projectItemFilePath, true);
                project.ProjectItems.AddFromFile(projectItemFilePath);
            }
        }
        outputWindow.ReportStatusMessage("[" + DateTime.Now.ToString() + "] Finished build on: " + target.Name);
    }
      
    
    #>
